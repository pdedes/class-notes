___________

TWITTER Workshop
___________

	The App.js file is the initial setup of the application. It's good practice to modularize when possible, for example, move routes to a separate routes.js file

	Modulalrization:
		You can get information from a module, BUT if you want to give information to it, 'require' does not support that. The module needs to be turned into a function in order to get parameters passed to it, via functional programming.

		It's good practice to simplify app by pulling as much out of it as possible.

	When we first run the application, the stylesheets were off, this is because we had not explicitly made the public folder available to GET requests. We need to use...	
		app.use(express.static(__dirname + '/public'));

	One reason the URL scheme suggested (/users/:name/tweets/:id) is cardinality, one User may have multiple tweets, followers, or other resources etc.

	The Tweet ID can be tagged with a number via the ADD function in TweetBank. Just add ID to the object and use data.length as an indicator for which number is available next.

	Getting the individual tweet id was solved using ParseInt, the problem being that the comparison between "ID" from the URL and the Data store was between unequal types (Int & String). You need to use a combination of console.log and upstream/downstream thinking to find the issues.

	Always test your mental model in the code by using the console to see if data is getting delivered (in the right format) to the destination that you expect. For example, for 'req.params.text' becomes a problem for post requests - we need to use a body parser to properly read these inputs.
		FORM DATA >> (see source in Chrome Dev Tools). The name and text of the tweet is being passed in an ugly format, A tweet that has the following data:
		name: Pete
		tweet: Hello there.

			May be passed to the server as...

			name&Pete%20&tweet&Hello%20there (an example). 

		We need a way to peel this apart for the useful information. We use Body Parser middleware to handle these inputs.

	SOCKETS

		HTTP does not support updating clients...
			1. One client cannot notify the other client the update has happened
			2. One client needs to be constantly polling the server for new data via http to mimic a realtime feel

		Sockets allow the browser to keep open a persistent connection with the server. It's a separate protocol.

		You cannot initialize a connection via Socket, but you can handle all of the information afterwards doing it. Generally speaking, not all requests are made with Sockets. Sockets are great when you need to communicate across other clients changes that have happened.

		$npm install socket.io --save

			var server = app.listen(3000);
			var io = socketio.listen(server);

			^^The socketio listen event piggy-backs on the established http connection port.

		The timing and scoping of initializing IO in the app/index.js files can be very important to prevent errors.

			IO is not defined in the index file, so we need to be able to pass "IO" as a variable to the Router function we have created...

		Appending the tweet to the DOM - You want to find the correct container
			1. Find the container
			2. Find the children
			3. Find the last child

		A few ways to circumnavigate the pain of maintaining the HTML are below. There are tools to help with this messy maintenance issue.
			1. Build a side SWIG template for the individual tweets
			2. Angular...
				>Receives JSON from the server
				>Angular uses client-side JS to built the template on the spot...


		Module exportation of a function is useful when you want to send it information upon requiring it.


___________

DATABASES
___________

	What's in a name?

	What's in a datapoint?

	We'll talk about SQL & NoSQL databases
		>Relational databases have been around for almost 50 years
		>NoSQL have excellent new features, but Relational is still the standard

	Databases that can't be loaded into RAM start to change your interactions with it. They are very hard to scale, therefore are usually done last.

	DBs need special attention when scaling. How do you replicate a new post across all of the databases at nearly simultaneous time?

	Oracle was the first company that brought a product to market from relational db theory.

	The DBMS abstracts away data storage for the business or non-technical person. It is a layer between the schema and the application. It knows where to find the data you're looking for.

		Devs only need to know the DBMS language to find and alter data

	SQL is a language for talking to the DBMS

		--> You can specify what answers the query should return, but not how the query is executed or where and how the data is stored.

	Databases also handle file/locking multiple access for you.

	Vocabulary;
		-Tables
		-Attributes (Columns)
		-Instances (Rows)
		-Duplicate rows are not allowed
		-Schema - the data structure
			>Shouldn't change very often but they do
			>SQL is bad at this
			>NoSQL is good at changing on the fly

	Example: We have two tables: Students, Schools
		>Introduce a third table "Enrollment" which relates those two tables

	The whole point of web applications, to get store and retrieve data...

	SQL Commands --> CRUD

		INSERT > Insert a new row
		SELECT > Get data from a DB
		UPDATE > Update existing row
		DELETE > Delete rows from a table
		CREATE

	A relation table does not replicate all of the data, it tries to minimize the amount of duplicative data by utilizing the table ID #s.

	Example...

		SELECT 	*
		FROM 	Student
		WHERE 	age > 12

	A relationship between two tables can be used to query for the data you want. You do this using a JOIN.

	Advantage of relationship tables is that they can help preventing the duplication of data, It's similar to DRY programming in a sense.

	JOIN gives you a temporary view of this 'terrible' duplicative view in memory. You can then perform your query, and the join will be destroyed following that.

	Creating a JOIN happens in two steps:
		1. Join the first table with the relational table based on a shared column
		2. Join the second table with the one from step 1, based on a shared column (this will likely cause the duplication)
		---
		Next: Query the newly JOINed table

	QUERIES & KEYWORS

		SELECT/FROM 		The basic SQL query
		SELECT/FROM/WHERE 	The query including a conditional

		WHERE
			SELECT * FROM movies WHERE year BETWEEN 1999 AND 2003;
			SELECT * FROM movies WHERE year = 1999 OR 2003;

		ORDER BY
			SELECT * FROM movies ORDER BY year ASC;
			SELECT * FROM movies ORDER BY year ASC, title DESC;
				>This double grouping firsts orders by years ascending, and within that group orders titles descending.
			SELECT name FROM actors ORDER BY name DESC;
				>Gets actors names and sorts them in reverse alphabetical order

		LIMIT & OFFSET
			SELECT * FROM movies LIMIT 10
				>Only returns the first 10 hits
			SELECT * FROM movies LIMIT 10 OFFSET 4;
				>Returns only ten results but starting from the fifth entry

			Note: LIMIT & OFFSET can be further collapsed into LIMIT with two arguments where
				-Argument 1 is the Offset
				-Argument 2 is the offset

			Therefore we can write the second query as...
				SELECT * FROM movies LIMIT 4, 10;

		NULL
			The spot is empty in the database. If you're not careful, your queries may return unexpected problems.

			You cannot use '=' with NULL, you must search with IS NULL.

			You can filter out Null values by using WHERE column IS NOT NULL

	JOINING, NORMALIZATION...

		Normaliztion is the process of setting up a new table and removing redundant data to this new table. You can then relate these tables using the ID key.

		KEYS
			PRIMARY, completely unique, can't be null, can't be duplicated
				ID#

			UNIQUE, similar to primary, can be null, can't be duplicated
				EMAIL
				SSN

			FOREIGN, describe relationships between two tables, can be null, can be duplicated.
				genre_ID

		ALTER TABLE movies ADD COLUMN id INTEGER AUTO-INCREMENT PRIMARY KEY FIRST
			ALTER TABLE: modifies an existing DB table
			ADD COLUMN: inserts a column
			INTEGER: defines type
			AUTO-INCREMENT: instructs the DBMS to handle the counting
			PRIMARY: indicates this new column is the primary key
			FIRST: inserts the column as the new first column of the table.

			**Primary keys by definition do not allow null values, so we don't need to explicitly declare it.

		ALTER TABLE movies ADD COLUMN genre_ID INTEGER NULL ADD CONSTRAINT FOREIGN KEY (genre_id) REFERENCES genres(id);

			Here, the new elements help us create the relationship between the movies and genres tables. The CONTRAINT keyword helps limit to the values availble. We want the genre_id to be a foreign key, we want the genre_id to be CONSTRAINED to the Primary IDs of the genre table.

		UPDATE movies SET genre_id = 1 WHERE id = 8 OR id = 9;

			Using this command, we can update the rows while also constraining our options for genre_id. If we were to attempt to set the value to a number outside of the primary keys available in table 'genres' we'd fail that constraint and it wouldn't work.

		CREATE TABLE name (col_name CHARACTERISTICS, col_name CHARS)

		ALTER TABLE table ADD COLUMN col_name INTEGER AUTO_INCREMENT PRIMARY KEY FIRST;
			>Inserts a new column with those attributes listed applied.

		ALTER TABLE t_movies ADD COLUMN fk_genre_id INTEGER, CONSTRAINT FOREIGN KEY(fk_genre_id) REFERENCES t_genres(pk_id);

		Joining our new tables...

		INNER JOIN
			SELECT * FROM movies JOIN genres ON movies.genre_id = genres.id;
				JOIN is the keyword merging our tables
				ON is the conditional, informing the DBMS which columns should be used to align.

				Note the notation here table.col_name

			An inner join is the overlapping section of the venn diagram created by both of the tables movies and genres

		OUTER JOIN
			LEFT
				If we wanted to return the entire movies table along with the inner join values, this is called a left join.

			SELECT * FROM movies LEFT OUTER JOIN genres ON movies.genre_id = genres.id;
				>You will get many null values in this situation.

			RIGHT
				The overlap of the inner join with the table on the right

		ALIASING
			Using nicknames for columns during a join to help us make sense of the merged data.

			SELECT movies.title, genres.name AS genre_name FROM movies LEFT OUTER JOIN genres ON movies.genre_id = genres.id;

				AS: Assigns the alias





















