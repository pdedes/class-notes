______________

UI Router Workshop Review
______________

	Routing and URL structure is almost as important as what is on your page. Many apps have a complex process flow. 
		For example: if an app has a wizard that guides you through sign-up steps.

	URL Routing will help you wire up these pathways, as well as take advantage of browser functionality such as the back-button.

	UI-ROUTER is a third party tool that has more features than Angular's stock ngRoute

	When we bower install ui-router, you have two choices, either move the compnent you've installed into the public folder, OR, add a new static route to allow the index.html to access the compenents...

		...in Express app.js...
			var bowerComponentsPath = path.join(__dirname, "../bower_compoents");
			app.use(express.static(bowerComponentsPath)); 	<-- the URL path will NOT contain '/bower_components'

	URLs are not only static folder structures, today they are 'routes' that serve up resources based on the address.

	A new provider of dependency injectables: We can inject new features into our Angular app using the dependency brackets.

		var app = angular.modeul('flashcards', ['ui.router']);

		app.config(function($stateProvider) {

			$stateProvider
				.state('main', {

				})

				.state('add', {
					url: "/add",
					templateUrl: "templates/add-form.html",
					controller: "NewCardController"
				})

		});

	Note: Use the full version of libraries, and not the minified version. If you want minified code, you can run it through a process later on.

	The browser's first source of truth, is the server, so when the browser first asks for the /add route, we get an error from the backend stating:
		"Cannote GET /add"

	<a ui-sref>

		Is a tool that helps maintain browser functionality when we build URLs off of our links.

		ui-sref-active="activeTab" is an attribute that's available. Note: When a child state is 'active', all of its parent states are 'active'. 

		ui-sref also accepts parameter values from the URL.

			<button
				ui-sref="main.category({ category: category })"
			>

			Note: if your route requires these parameters, you pass them in as is, if not, they will become query parameters appended to the end.

	Angular has a template cache cycle.

		In production, a template cache is built, in development mode, we are always pinging the backend for the latest file. So in production mode, the first thing Angular will do, is check whether there is an available template cache, if not, it will hit the server.


	ui-router 'RESOLVE' helps keep the controller much cleaner:

		"You can use resolve to provide your controller with content or data that is custom to the state. resolve is an optional map of dependencies which should be injected into the controller." .. From the ui-router documentation

		resolve: {
			cards: function(FlashCardsFactoy) {

			}
		}

	state.go() is the controller equivalent of ng-click

	HTML5 Mode, you need to change the '/' route in the server. since the #/ anchor changes in the front end. 

		app.get('/*') will now push all requests to the main index.html page, load that to the front, and allow the front-end to handle all of the routing.


______________

Senior Phase
______________

	Move deeper, not laterally.

	On the Wow S-Curve:
		Rapid Prototype
		Productization		<-- Be careful getting stuck here. Mostly invisible work here so ask for help.	
		Traction/Usage

	Esprima: Engine tree structure
		--> Code syntax and code highlighters work with code this way
		--> This would be an ambitious project

	Don't make your risk the ecosystem, make it the idea/code

	Building a company-based project is a good way in

	producthunt.com

	convolutional neuro-networks (AI)

______________

Promises
______________

	A promise is an Object. "The eventual result of an asynchronous action."

	As such, you can pass it, collect it in arrays, you can test it.

	But the key part, is a function method '.then'. An async process will report back in and report a value to it. It's a way to attach callbacks in a portable way, since it can be moved around and manipulated much easier.

	Our previous async programming has been "Continuation-passing" style. The async process will exit the client-side JS thread, and it will be handled outside, and it will be returned into the callback we have established.

			models.Page.findOne().exec(function () {})

	In Promises, we would represent this as...

			models.Page.findOne( {}).exec().then().

	This works because the exec function returns a promise. What is point of this?

	Our callbacks are no longer tied to our asynchronous function - they can be broken apart and split up. The start and handling of the async function are completely glued together.

		var promise = models.Page.findOne( {}).exec();

		promise.then(
			function (page) {}
			function (err) {}
		)

	The promise is like a bag, that is collecting many different callbacks, that will be executed when they are ready to go.

	You don't need to know when the promise is going to be resolved; it's time ambivalent.

	Mongoose has a promise library called M-Promise built into it.

	You can even use promises to export via a module

		module.exports = userNameObj;

	Q.all() works by attaching new behavior to a promise. It says 'for every promise in an array', when it resolves run a promise. Q says "tell me when you're all ready". This is extremely performant > not listening > the things you're waiting on come to you when they've all arrived.

	.THEN is the public and principal way you interact with a promise. IT's how you transform a promise into a new promise via chaining.

		the following are available via closure
		state: 	pending,	fulfilled, or rejected
		information:	value, or reason

		Promises only represent one async operation; once it's been settled, you can't change it's state afterwards

	Format:

		aPromise.then( successHandler, failureHandler );

		If you don't have the right handler, an error will keep propagating down the chain until it finally finds a failure handler somewhwere.

	Get into the habit of thinking of async as encapsultating one resulting value one time.

	"Domenic Denicola"

		Async Promises is to help us write our code to look and handle more synchronously, avoid Callback Hell.

	Error handling has DRY enforcement with Promises, since you only have to stick .catch(function (err) {}) at the end to catch any errors. Using the absence of a failure handler, allows you to propagate promises to the end of the chain.

		The point of an error handler that exists in the middle of the chaing, is to handle the situation and return us to successful chain operation

	There's no 'canonical' Promise in the JS world. They are a data structure that are implemented differently across libraries.

	A+ are the leading standard.

		Warning: jQuery $.Deferred is not a standard, so try avoiding it.

	These libraries wrap async calls in promise-makers
		Q
		Bluebird

	Promisification helps rebuild old async style into promise style.

		Bluebird.promisifyAll(fs);
		fs.readFileAsync('file.j', 'utf8').then(...)

	A deferral is a parent or manager of a promise, it's responsible for one promise. It hangs out with the async function, when the callback happens, it will be the manager of the return of the callback.

		It's important to separate that the 

		Each deferral births one promise. The deferral is the MIDDLEMAN between old style async callbacks and a promise. It takes the callback return, and if it's an error, it runs it to the promise via myDeferral.reject(err) and if it's OK, it runs it to the promise via myDeferral.resolve(data);

		The promise comes from an object that is created from the deferral code.

		Here's a modern implementation of Promise Building...

			var myPromise = new Promise ( function (resolve, reject) {			<-- The promise is built synchronously and .then is available right away
				someAsyncCall( function (err, data) {	
					if(err) reject(err);										<-- resolve and reject are async
					else resolve(data);
				})
			})
		
			myPromise.then( someSuccessHandler, someErrorHandler );

			Where do Resolve and Reject come from? They come from the Promise or Deferral Library...

	Main Takeaway:
		The promise represenets the value of the async, and we can attach behavior to it via '.then'

		Promise B = PromiseA.then( [successHandler], [failureHandler]);

		.catch(handleErr) is equivalent to .then(null, handleErr);

	The best thing about callbacks, is that you can return something from your call. From an async value 






























