___________

FQL
___________
	
	prototype.merge {}
		Use Object.keys(objName).forEach( function (){
			obj1[key] = obj2[key];
		})
		//This will cause problems later on

	prototype.count {}
		return this.exec().length;

	try to use '.forEach' more often

	SELECT and WHERE operate on different axes of the table
		Where on the y
		Select on the x
			>Underscore has a function called 'pluck' which does this

	Order
		.sort() will mutate the array in place using the function that you pass it. Since it does do it in place, you do not need to pass the value into a new variable to store it.

	You need to return to prototype.where to make sure it takes Indexing into account.

	Indexing
		Since any change to a table will corrupt the index, it's better to have it run on the ID of the row.

	FQL (this workshop) will resemble the way we interact with databases later on using Mongoose DB.

	DON'T FORGET... Use functional programming whenever possible! Take advantage of Javascript's good array/object transveral functions. If you're writing a for(var i = 0; i < array.length; i++) loop on arrays, you should automatically think --> Functional Programming.

		Array.prototype.every()  	--> performs a check on every element

		Array.prototype.filter()	--> pushes filtered items to a new array

		Array.prototype.map()		--> creates a new array that has transformed every element based on a function

		Array.prototype.forEach()	--> executes a function once per array element

		Note: When utilizing the functional programming paradigm, keep note of what it is you are working on. These functions all work on arrays, and may return new arrays or alter them in place. If you are working on Objects, you'll need to figure out a way to transform your object into a workable array. For example, using Object.keys(theObj) will deliver an array of keys that you can then work on.

	obj.sort(function(a, b) {}) can sort anything as long as it can make a mathematical comparison between the two, which in this case we are doing by passing the comparator function to it.

		The function here simply says, find the difference between the values of a[attribute] - b[attribute];

___________

Twitter JS with SQL Backend
___________

	The point of a database is to have persistent data. A database has its information live past the next reboot.

	Model
		data persistence
		data synchronization
	View 
		front-end view
		user presentation
	Controller
		The "Playmaker"
		Managing comms between M & V
		Essentially defines the behavior of your applications


	Text files could give us persistence, but a DBMS gives us higher-order functionality including searching, hierarchy

	We need a communication line from Node to the database. This is the job of the ORM. An ORM serves relational databases, an ODM serves Document (noSQL) databases.
		
		DB 		ORM
		SQL: 		SQLize
		MongoDB:	Mongoose

	An ORM should give you a programming language interface to database querying functions

		var Sequelize = require('sequelize');
		var sequelize = new Sequelize();

		//Here we define and model how the Tweet will look in the database
		var Tweet = sequelize.define('Tweet', {
			text: Sequelize.STRING,
			USERNAME: Sequelize.STRING
		})


		//Databases operate asynchronously, we need a callback function

		Tweet.find({where: {text: "sample tweet text"}})
		.done(function (err, tweets) {
			console.log(tweets);

			// within here we need to pass the data back to the controller
			// we need to then pass that to the view to build the template

		})







































